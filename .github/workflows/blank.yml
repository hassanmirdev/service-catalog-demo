name: provision Service Catalog
run-name: infra prov
on:
 workflow_dispatch:
    inputs:
      environment:
        description: "Choose Environments to Deploy"
        required: true
        default: "dev"
        type: choice
        options:
        - dev
        - staging
        - prod

 # push:
 #    branches:
 #       - main
permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: Terraform-infra
    runs-on: ubuntu-latest
    # env:
    #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5
      
      # Step: Set up AWS credentials via OIDC
      - name: Set up AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::180294181827:role/github-actions-OIDC
          role-session-name: github-actions-session
          aws-region: us-east-1
          audience: sts.amazonaws.com
   
      # Step: Terraform Init
      - name: Terraform Init
        run: | 
          cd ./infra/environments/${{ github.event.inputs.environment || 'dev' }}
          terraform init
      - name: Install TFLint
        run: |
          TFLINT_VERSION="v0.55.0"
          curl -sL "https://github.com/terraform-linters/tflint/releases/download/${TFLINT_VERSION}/tflint_linux_amd64.zip" -o tflint.zip
          
          if [ ! -s "tflint.zip" ]; then
            echo "Error: Downloaded TFLint archive is empty or invalid."
            exit 1
          fi

          unzip tflint.zip
          chmod +x tflint
          sudo mv tflint /usr/local/bin/
          rm tflint.zip
          
          echo "TFLint installed successfully:"
          tflint --version

      - name: Run TFLint
        run: |
         cd ./infra/environments/${{ github.event.inputs.environment || 'dev' }}

         # Ensure .tflint.hcl exists
         if [ ! -f ".tflint.hcl" ]; then
            cat <<EOF > .tflint.hcl
            plugin "terraform" {
            enabled = true
           }
         EOF
         fi

         # Install TFLint plugin (Terraform)
         tflint --init

         # Run TFLint with proper syntax
         tflint --config .tflint.hcl
     
      # Step: Run Terraform Validate (validate configuration files)
      - name: Terraform Validate
        run: |
          cd ./infra/environments/${{ github.event.inputs.environment || 'dev' }}
          terraform validate

      # Step: Terraform Plan
      - name: Terraform Plan
        run: |
          cd ./infra/environments/${{ github.event.inputs.environment || 'dev' }}
          terraform plan 

      # Step: Apply Terraform Condfiguration
      - name: Apply Terraform
        run: |
          cd ./infra/environments/${{ github.event.inputs.environment || 'dev' }}
          terraform init
          terraform apply -auto-approve
